{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shalu\\\\OneDrive\\\\Desktop\\\\Project\\\\frontend\\\\src\\\\contexts\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\nexport const useCart = () => {\n  _s();\n  return useContext(CartContext);\n};\n_s(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const CartProvider = ({\n  children\n}) => {\n  _s2();\n  const [cart, setCart] = useState([]);\n  const [total, setTotal] = useState(0);\n\n  // Load cart from localStorage when component mounts\n  useEffect(() => {\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      try {\n        setCart(JSON.parse(savedCart));\n      } catch (error) {\n        console.error('Failed to parse cart from localStorage', error);\n        setCart([]);\n      }\n    }\n  }, []);\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(cart));\n\n    // Calculate total\n    const newTotal = cart.reduce((sum, item) => {\n      return sum + item.price * item.quantity;\n    }, 0);\n    setTotal(newTotal);\n  }, [cart]);\n\n  // Add item to cart\n  const addToCart = product => {\n    setCart(prevCart => {\n      // Check if product already exists in cart\n      const existingItemIndex = prevCart.findIndex(item => item.id === product.id);\n      if (existingItemIndex >= 0) {\n        // If product exists, increment quantity\n        const updatedCart = [...prevCart];\n        updatedCart[existingItemIndex] = {\n          ...updatedCart[existingItemIndex],\n          quantity: updatedCart[existingItemIndex].quantity + 1\n        };\n        return updatedCart;\n      } else {\n        // If product doesn't exist, add it with quantity 1\n        return [...prevCart, {\n          ...product,\n          quantity: 1\n        }];\n      }\n    });\n  };\n\n  // Remove item from cart\n  const removeFromCart = productId => {\n    setCart(prevCart => prevCart.filter(item => item.id !== productId));\n  };\n\n  // Update item quantity\n  const updateQuantity = (productId, newQuantity) => {\n    if (newQuantity < 1) return;\n    setCart(prevCart => {\n      return prevCart.map(item => {\n        if (item.id === productId) {\n          return {\n            ...item,\n            quantity: newQuantity\n          };\n        }\n        return item;\n      });\n    });\n  };\n\n  // Clear cart\n  const clearCart = () => {\n    setCart([]);\n  };\n\n  // Get cart item count\n  const getItemCount = () => {\n    return cart.reduce((count, item) => count + item.quantity, 0);\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      total,\n      addToCart,\n      removeFromCart,\n      updateQuantity,\n      clearCart,\n      getItemCount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s2(CartProvider, \"Z/Q2NUAgGEmQ9+FH7s9v7ZX1aS4=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","CartContext","useCart","_s","CartProvider","children","_s2","cart","setCart","total","setTotal","savedCart","localStorage","getItem","JSON","parse","error","console","setItem","stringify","newTotal","reduce","sum","item","price","quantity","addToCart","product","prevCart","existingItemIndex","findIndex","id","updatedCart","removeFromCart","productId","filter","updateQuantity","newQuantity","map","clearCart","getItemCount","count","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/shalu/OneDrive/Desktop/Project/frontend/src/contexts/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst CartContext = createContext();\r\n\r\nexport const useCart = () => useContext(CartContext);\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [cart, setCart] = useState([]);\r\n  const [total, setTotal] = useState(0);\r\n\r\n  // Load cart from localStorage when component mounts\r\n  useEffect(() => {\r\n    const savedCart = localStorage.getItem('cart');\r\n    if (savedCart) {\r\n      try {\r\n        setCart(JSON.parse(savedCart));\r\n      } catch (error) {\r\n        console.error('Failed to parse cart from localStorage', error);\r\n        setCart([]);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Save cart to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem('cart', JSON.stringify(cart));\r\n    \r\n    // Calculate total\r\n    const newTotal = cart.reduce((sum, item) => {\r\n      return sum + (item.price * item.quantity);\r\n    }, 0);\r\n    \r\n    setTotal(newTotal);\r\n  }, [cart]);\r\n\r\n  // Add item to cart\r\n  const addToCart = (product) => {\r\n    setCart(prevCart => {\r\n      // Check if product already exists in cart\r\n      const existingItemIndex = prevCart.findIndex(item => item.id === product.id);\r\n      \r\n      if (existingItemIndex >= 0) {\r\n        // If product exists, increment quantity\r\n        const updatedCart = [...prevCart];\r\n        updatedCart[existingItemIndex] = {\r\n          ...updatedCart[existingItemIndex],\r\n          quantity: updatedCart[existingItemIndex].quantity + 1\r\n        };\r\n        return updatedCart;\r\n      } else {\r\n        // If product doesn't exist, add it with quantity 1\r\n        return [...prevCart, { ...product, quantity: 1 }];\r\n      }\r\n    });\r\n  };\r\n\r\n  // Remove item from cart\r\n  const removeFromCart = (productId) => {\r\n    setCart(prevCart => prevCart.filter(item => item.id !== productId));\r\n  };\r\n\r\n  // Update item quantity\r\n  const updateQuantity = (productId, newQuantity) => {\r\n    if (newQuantity < 1) return;\r\n    \r\n    setCart(prevCart => {\r\n      return prevCart.map(item => {\r\n        if (item.id === productId) {\r\n          return { ...item, quantity: newQuantity };\r\n        }\r\n        return item;\r\n      });\r\n    });\r\n  };\r\n\r\n  // Clear cart\r\n  const clearCart = () => {\r\n    setCart([]);\r\n  };\r\n\r\n  // Get cart item count\r\n  const getItemCount = () => {\r\n    return cart.reduce((count, item) => count + item.quantity, 0);\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={{\r\n      cart,\r\n      total,\r\n      addToCart,\r\n      removeFromCart,\r\n      updateQuantity,\r\n      clearCart,\r\n      getItemCount\r\n    }}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}